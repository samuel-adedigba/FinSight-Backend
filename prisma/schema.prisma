// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("USER")
  phone     String?  @unique
  bvn       String?  @unique
  nin       String?  @unique
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts             BankAccount[]
  transactions         Transaction[]
  webhookEvents        WebhookEvent[]
  beneficiary          Beneficiary[]
  Notification         Notification[]
  budgets              Budget[]
  categories           Category[]
  recurringTransaction RecurringTransaction[]
  savingsGoals         SavingsGoal[]
}

model BankAccount {
  id            Int      @id
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  isActive      Boolean  @default(false)
  bankCode      Int
  bankName      String
  accountNumber String   @unique
  currency      String
  balance       Float    @default(0)
  createdAt     DateTime @default(now())

  transactions Transaction[]
  transfersOut Transfer[]    @relation("TransfersOut")
  transfersIn  Transfer[]    @relation("TransfersIn")
  Beneficiary  Beneficiary[]
}

model Transaction {
  id         String      @id @default(uuid())
  accountId  Int
  account    BankAccount @relation(fields: [accountId], references: [id])
  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  categoryId Int?
  category   Category?   @relation(fields: [categoryId], references: [id])

  type        String
  amount      Float
  tag         String
  description String?
  createdAt   DateTime // your imported txn date
  importedAt  DateTime @default(now()) // when we wrote it

  sentTo                String?
  senderAccountNumber   String?
  receivedFrom          String?
  receiverAccountNumber String?
  reference             String?

  sourceFileHash String?

  @@unique([accountId, sourceFileHash, reference, createdAt])
}

model Transfer {
  id             Int         @id @default(autoincrement())
  fromAccount    BankAccount @relation("TransfersOut", fields: [fromAccountId], references: [id])
  fromAccountId  Int
  toAccount      BankAccount @relation("TransfersIn", fields: [toAccountId], references: [id])
  toAccountId    Int
  amount         Float
  status         String      @default("pending")
  idempotencyKey String?     @unique
  initiatedAt    DateTime    @default(now())
  completedAt    DateTime?
}

model WebhookEvent {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  eventType  String
  payload    Json
  receivedAt DateTime @default(now())
}

model Bank {
  id   Int    @id @default(autoincrement())
  code Int    @unique
  name String @unique
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  payload   Json
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Beneficiary {
  id        Int         @id @default(autoincrement())
  userId    Int
  saved     Boolean     @default(true)
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id])
  account   BankAccount @relation(fields: [accountId], references: [id])
  accountId Int
}

enum CategoryType {
  INCOME
  EXPENSE
}

model Category {
  id           Int           @id @default(autoincrement())
  userId       Int
  name         String
  type         CategoryType
  user         User          @relation(fields: [userId], references: [id])
  budgets      Budget[]
  transactions Transaction[]

  @@unique([userId, name])
}

model Budget {
  id         Int       @id @default(autoincrement())
  userId     Int
  categoryId Int
  name       String?
  amount     Decimal
  startDate  DateTime
  endDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}

model RecurringTransaction {
  id     String @id @default(uuid())
  userId Int
  user   User   @relation(fields: [userId], references: [id])

  name            String // e.g., "Netflix", "Landlord Rent"
  predictedAmount Decimal // The average amount of the transaction
  predictedDate   DateTime // The next predicted due date
  frequency       String // "weekly", "monthly", "yearly"
  confidenceScore Float // How sure are we? (e.g., 0.95 for 95% confident)

  // This helps us avoid re-analyzing the same transaction
  lastRealTransactionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name]) // A user can only have one recurring "Netflix" bill
}

enum GoalType {
  ONE_TIME // Vacation, PS5, etc.
  RECURRING_FUND // A "Sinking Fund" for rent, annual insurance
}

// A SavingsGoal is a BUCKET to fill
model SavingsGoal {
  id     String @id @default(cuid())
  userId Int
  user   User   @relation(fields: [userId], references: [id])

  name     String // "Hawaii Vacation", "Annual Car Insurance"
  goalType GoalType

  targetAmount  Decimal
  targetDate    DateTime
  currentAmount Decimal  @default(0)

  imageUrl String?
}
